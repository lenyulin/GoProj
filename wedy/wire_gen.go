// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	repository3 "GoProj/wedy/comment/repository"
	dao4 "GoProj/wedy/comment/repository/dao"
	service3 "GoProj/wedy/comment/service"
	"GoProj/wedy/interactive/events"
	repository2 "GoProj/wedy/interactive/repository"
	cache2 "GoProj/wedy/interactive/repository/cache"
	dao3 "GoProj/wedy/interactive/repository/dao"
	service2 "GoProj/wedy/interactive/service"
	"GoProj/wedy/internal/events/video"
	"GoProj/wedy/internal/repository"
	"GoProj/wedy/internal/repository/cache"
	"GoProj/wedy/internal/repository/dao"
	dao2 "GoProj/wedy/internal/repository/dao/video"
	"GoProj/wedy/internal/service"
	"GoProj/wedy/internal/web"
	"GoProj/wedy/ioc"
	"GoProj/wedy/pkg/logger"
	"GoProj/wedy/pkg/oss"
	"github.com/IBM/sarama"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	v := ioc.InitMiddleware(cmdable)
	db := ioc.InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	ueerHandler := web.NewUserHandler(userService, codeService)
	ossHandler := InitOssHdl()
	videoCache := cache.NewVideoRedisCache(cmdable)
	videoRepository := InitializeVideoRepository(db, ossHandler, videoCache)
	client := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(client)
	videoProducer := video.NewSaramaSyncProducer(syncProducer)
	loggerV1 := ioc.InitLogger()
	videoService := service.NewVideoService(videoRepository, videoProducer, loggerV1)
	interactiveDao := InitInteractiveDAO(db)
	interactiveCache := InitInteractiveCache(cmdable)
	interactiveRepository := InitCachedInteractiveRepository(interactiveDao, interactiveCache)
	interactiveService := service2.NewInteractiveService(interactiveRepository)
	videoHandler := web.NewVideoHandler(videoService, interactiveService)
	commentRepository := InitCommentRepository(db)
	commentService := service3.NewCommentService(commentRepository)
	commentHandler := web.NewCommentHandler(commentService)
	engine := ioc.InitWebServer(v, ueerHandler, videoHandler, commentHandler)
	interactiveWatchEventConsumer := InitInteractiveWatchEventConsumer(interactiveRepository, client, loggerV1)
	v2 := ioc.InitConsumer(interactiveWatchEventConsumer)
	rankingService := service.NewBatchRankingService(interactiveService, videoService)
	rlockClient := ioc.InitRLockClent(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, loggerV1)
	cron := ioc.InitJobs(loggerV1, rankingJob)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

func InitializeVideoRepository(db *gorm.DB, ossUploader oss.OSSHandler, cache2 cache.VideoCache) repository.VideoRepository {
	gormDAO := dao2.NewGORMVideoDAO(db, cache2)
	vdao := dao2.NewOSSVideoDao(ossUploader, gormDAO)
	return repository.NewVideoRepository(vdao, cache2)
}

func InitOssHdl() oss.OSSHandler {
	return oss.NewOSSHandler(ioc.InitOSS())
}

func InitCachedInteractiveRepository(dao3 dao3.InteractiveDao, cache2 cache2.InteractiveCache) repository2.InteractiveRepository {
	return repository2.NewCachedInteractiveRepository(dao3, cache2)
}

func InitCommentRepository(db *gorm.DB) repository3.CommentRepository {
	dao3 := dao4.NewGORMCommentDAO(db)
	return repository3.NewCachedCommentRepository(dao3)
}

func InitInteractiveDAO(db *gorm.DB) dao3.InteractiveDao {
	return dao3.NewGORMInteractiveDAO(db)
}

func InitInteractiveCache(client redis.Cmdable) cache2.InteractiveCache {
	return cache2.NewInteractiveRedisCache(client)
}

func InitInteractiveWatchEventConsumer(repo repository2.InteractiveRepository, client sarama.Client, log logger.LoggerV1) *events.InteractiveWatchEventConsumer {
	return events.NewInteractiveWatchEventConsumer(repo, client, log)
}

var rankingSvcSet = wire.NewSet(cache.NewRedisRankingCache, repository.NewCacheRankingRepository, service.NewBatchRankingService)
