// Code generated by MockGen. DO NOT EDIT.
// Source: .\wedy\internal\service\comment_redis.go
//
// Generated by this command:
//
//	mockgen --source=.\wedy\internal\service\comment_redis.go --destination=.\wedy\internal\service\mocks\comment.mock.go --package=svcmock
//

// Package svcmock is a generated GoMock package.
package svcmock

import (
	domian "GoProj/wedy/comment/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
	isgomock struct{}
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// SubmitComment mocks base method.
func (m *MockCommentService) SubmitComment(ctx context.Context, comment domian.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitComment indicates an expected call of SubmitComment.
func (mr *MockCommentServiceMockRecorder) SubmitComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitComment", reflect.TypeOf((*MockCommentService)(nil).SubmitComment), ctx, comment)
}
