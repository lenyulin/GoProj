// Code generated by MockGen. DO NOT EDIT.
// Source: ./video.go
//
// Generated by this command:
//
//	mockgen --source=./video.go --package=svcmock --destination=./mocks/video.mock.go VideoService
//

// Package svcmock is a generated GoMock package.
package svcmock

import (
	domian "GoProj/wedy/internal/domian"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockVideoService is a mock of VideoService interface.
type MockVideoService struct {
	ctrl     *gomock.Controller
	recorder *MockVideoServiceMockRecorder
	isgomock struct{}
}

// MockVideoServiceMockRecorder is the mock recorder for MockVideoService.
type MockVideoServiceMockRecorder struct {
	mock *MockVideoService
}

// NewMockVideoService creates a new mock instance.
func NewMockVideoService(ctrl *gomock.Controller) *MockVideoService {
	mock := &MockVideoService{ctrl: ctrl}
	mock.recorder = &MockVideoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoService) EXPECT() *MockVideoServiceMockRecorder {
	return m.recorder
}

// GetByAuthor mocks base method.
func (m *MockVideoService) GetByAuthor(ctx context.Context, id int64, limit, offset int) ([]domian.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, id, limit, offset)
	ret0, _ := ret[0].([]domian.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockVideoServiceMockRecorder) GetByAuthor(ctx, id, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockVideoService)(nil).GetByAuthor), ctx, id, limit, offset)
}

// GetById mocks base method.
func (m *MockVideoService) GetById(ctx context.Context, id, uid int64) (domian.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id, uid)
	ret0, _ := ret[0].(domian.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVideoServiceMockRecorder) GetById(ctx, id, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVideoService)(nil).GetById), ctx, id, uid)
}

// ListPub mocks base method.
func (m *MockVideoService) ListPub(ctx context.Context, start time.Time, offset, limit int) ([]domian.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPub", ctx, start, offset, limit)
	ret0, _ := ret[0].([]domian.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPub indicates an expected call of ListPub.
func (mr *MockVideoServiceMockRecorder) ListPub(ctx, start, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPub", reflect.TypeOf((*MockVideoService)(nil).ListPub), ctx, start, offset, limit)
}

// Publish mocks base method.
func (m *MockVideoService) Publish(ctx context.Context, video domian.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockVideoServiceMockRecorder) Publish(ctx, video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockVideoService)(nil).Publish), ctx, video)
}

// Update mocks base method.
func (m *MockVideoService) Update(ctx context.Context, video domian.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVideoServiceMockRecorder) Update(ctx, video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideoService)(nil).Update), ctx, video)
}

// Withdrawn mocks base method.
func (m *MockVideoService) Withdrawn(ctx context.Context, video domian.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawn", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdrawn indicates an expected call of Withdrawn.
func (mr *MockVideoServiceMockRecorder) Withdrawn(ctx, video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawn", reflect.TypeOf((*MockVideoService)(nil).Withdrawn), ctx, video)
}
